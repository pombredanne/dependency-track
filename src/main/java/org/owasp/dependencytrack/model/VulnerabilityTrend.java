/*
 * This file is part of Dependency-Track.
 *
 * Dependency-Track is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Dependency-Track is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Dependency-Track. If not, see http://www.gnu.org/licenses/.
 */
package org.owasp.dependencytrack.model;

import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Maintains a historic list of vulnerability summary information.
 *
 * @author Steve Springett (steve.springett@owasp.org)
 */
@SuppressWarnings("unchecked")
public class VulnerabilityTrend {

    public enum Timespan {
        WEEK(7, 7),
        MONTH(30, 30),
        QUARTER(90, 12),
        YEAR(365, 12),
        DEFAULT(365, 12);

        int days;
        int divisions;

        private Timespan(int days, int divisions) {
            this.days = days;
            this.divisions = divisions;
        }

        public int getDays() {
            return days;
        }

        public int getDivisions() {
            return divisions;
        }

        public static Timespan getTimespan(int days) {
            for (Timespan timespan: Timespan.values()) {
                if (timespan.getDays() == days) {
                    return timespan;
                }
            }
            return Timespan.DEFAULT;
        }
    }

    private Map<Date, VulnerabilitySummary> trend = new LinkedHashMap<Date, VulnerabilitySummary>();


    public void addData(Date scanDate, VulnerabilitySummary summary) {
        this.trend.put(scanDate, summary);
    }

    public Map<Date, VulnerabilitySummary> getTrend() {
        final LinkedHashMap<Date, VulnerabilitySummary> map = new LinkedHashMap<Date, VulnerabilitySummary>();
        map.putAll(trend);
        return map;
    }

    public int getDataPoints() {
        return trend.size();
    }

    public void clear() {
        trend.clear();
    }

}
